//REKT mk1A Escape Pod  -	-	-	-	-	-	-	-	-	-	-
@PART[rektmk1a]:NEEDS[TacLifeSupport]:FINAL  
{ 

// Short term habitation, 6 crew days of food, waste, O2, Water, CO2 and waste water storage.

// Use replace (%) rather than edit (@), to ensure that the following values are loaded regardless of the presence/absence of MFT/RealFuels  
	%RESOURCE[Food] 
	{ 
		%amount = 2.19375 
		%maxAmount = 2.19375 
	} 
	%RESOURCE[Water] 
	{ 
		%amount = 1.449975 
		%maxAmount = 1.449975 
	} 
	%RESOURCE[Oxygen] 
	{ 
		%amount = 222.074468
		%maxAmount = 222.074468
	} 
	%RESOURCE[CarbonDioxide] 
	{ 
		%amount = 0 
		%maxAmount = 191.824705 
	} 
	%RESOURCE[Waste] 
	{ 
		%amount = 0 
		%maxAmount = 1.8465 
	} 
	%RESOURCE[WasteWater] 
	{ 
		%amount = 0 
		%maxAmount = 0.1995
	} 
	%MODULE = ModuleScalarLevelIndicator
	{
		controllerName = TACLevel 
		// Use minimum input value. Also supports "maximum" and "average" 
		operation = minimum 
		inputs = FoodLevel, OxygenLevel, WaterLevel, ElectricChargeLevel
		highColor = $HighResource 
		mediumColor = $MediumResource 
		lowColor = $LowResource 
		criticalColor = pulsate($LowResource, 1200, 1, 0.6) 
	} 
	MODULE 
	{ 
 		name = ModuleBooleanIndicator 
 		// Use logical AND of inputs.  Also supports "or" 
		operation = and 
		// Note that you can put a "!" in front of a boolean input to invert it 
 		inputs = FoodEnabled, OxygenEnabled, WaterEnabled, ElectricChargeEnabled
 		activeColor = TACLevel 
 		inactiveColor = blink(dualLevel, 900, $Off, 300) 
 		emissiveName = TACIndicator 
 	} 
} 



//REKT mk1N Escape Pod -	-	-	-	-	-	-	-	-	-	-
@PART[rektmk1n]:NEEDS[TacLifeSupport]:FINAL  
{ 

// Short term habitation, 6 crew days of food, waste, O2, Water, CO2 and waste water storage. 

// Use replace (%) rather than edit (@), to ensure that the following values are loaded regardless of the presence/absence of MFT/RealFuels  
	%RESOURCE[Food] 
	{ 
		%amount = 2.19375 
		%maxAmount = 2.19375 
	} 
	%RESOURCE[Water] 
	{ 
		%amount = 1.449975 
		%maxAmount = 1.449975 
	} 
	%RESOURCE[Oxygen] 
	{ 
		%amount = 222.074468 
		%maxAmount = 222.074468
	} 
	%RESOURCE[CarbonDioxide] 
	{ 
		%amount = 0 
		%maxAmount = 191.824705 
	} 
	%RESOURCE[Waste] 
	{ 
		%amount = 0 
		%maxAmount = 1.8465 
	} 
	%RESOURCE[WasteWater] 
	{ 
		%amount = 0 
		%maxAmount = 0.1995
	} 
	%MODULE = ModuleScalarLevelIndicator
	{
		controllerName = TACLevel 
		// Use minimum input value. Also supports "maximum" and "average" 
		operation = minimum 
		inputs = FoodLevel, OxygenLevel, WaterLevel, ElectricChargeLevel
		highColor = $HighResource 
		mediumColor = $MediumResource 
		lowColor = $LowResource 
		criticalColor = pulsate($LowResource, 1200, 1, 0.6) 
	} 
	MODULE 
	{ 
 		name = ModuleBooleanIndicator 
 		// Use logical AND of inputs.  Also supports "or" 
		operation = and 
		// Note that you can put a "!" in front of a boolean input to invert it 
 		inputs = FoodEnabled, OxygenEnabled, WaterEnabled, ElectricChargeEnabled
 		activeColor = TACLevel 
 		inactiveColor = blink(dualLevel, 900, $Off, 300) 
 		emissiveName = TACIndicator 
 	} 
}


//REKT mk1D Escape Pod -	-	-	-	-	-	-	-	-	-	- 
@PART[rektmk1d]:NEEDS[TacLifeSupport]:FINAL  
{ 

// Short term habitation, 30 crew days of food, waste, O2, Water, CO2 and waste water storage. 

// Use replace (%) rather than edit (@), to ensure that the following values are loaded regardless of the presence/absence of MFT/RealFuels  
	%RESOURCE[Food] 
	{ 
		%amount = 10.96875 
		%maxAmount = 10.96875 
	} 
	%RESOURCE[Water] 
	{ 
		%amount = 7.249875 
		%maxAmount = 7.249875 
	} 
	%RESOURCE[Oxygen] 
	{ 
		%amount = 1110.37234 
		%maxAmount = 1110.37234 
	} 
	%RESOURCE[CarbonDioxide] 
	{ 
		%amount = 0 
		%maxAmount = 959.123527 
	} 
	%RESOURCE[Waste] 
	{ 
		%amount = 0 
		%maxAmount = 9.2325 
	} 
	%RESOURCE[WasteWater] 
	{ 
		%amount = 0 
		%maxAmount = 0.9975
	} 
	MODULE[ModuleControllableEmissive] 
	{ 
		%emissiveName = TACIndicator 
	}
	%MODULE = ModuleScalarLevelIndicator
	{
		controllerName = TACLevel 
		// Use minimum input value. Also supports "maximum" and "average" 
		operation = minimum 
		inputs = FoodLevel, OxygenLevel, WaterLevel, ElectricChargeLevel
		highColor = $HighResource 
		mediumColor = $MediumResource 
		lowColor = $LowResource 
		criticalColor = pulsate($LowResource, 1200, 1, 0.6) 
	} 
	MODULE 
	{ 
 		name = ModuleBooleanIndicator 
 		// Use logical AND of inputs.  Also supports "or" 
		operation = and 
		// Note that you can put a "!" in front of a boolean input to invert it 
 		inputs = FoodEnabled, OxygenEnabled, WaterEnabled, ElectricChargeEnabled
 		activeColor = TACLevel 
 		inactiveColor = blink(dualLevel, 900, $Off, 300) 
 		emissiveName = TACIndicator 
 	} 
}  